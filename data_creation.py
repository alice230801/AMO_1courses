# -*- coding: utf-8 -*-
"""data_creation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IZYPB4MWgJou5GrREO5cbDHQ4aPYwKMc
"""

import csv
import random
import os

#данные о разрядных нормативов на разные дистанции
class Data_size:
    def __init__(self, firstrazr, secondrazr, thirdrazr,  Data_distance):
        self.firstrazr = firstrazr
        self.secondrazr = secondrazr
        self.thirdrazr = thirdrazr

        self.Data_distance = Data_distance

    def __str__(self):
        return f"Class: {self.Data_distance}, firstrazr: {self.firstrazr}, secondrazr: {self.secondrazr}, " \
               f"thirdrazr: {self.thirdrazr}"


def on_anomalies_noise(value):
    if (value % 7 == 0) and(value % 2 == 0):
      anomalies_noise =  random.randint(-10, 30)
    else: anomalies_noise = value
    return anomalies_noise



def create_random_options():
    classes = ['1000m', '800m', '600m','400m']  # Размеры одежды
    Data_distance = random.choice(classes)

    if Data_distance == '1000m':
        firstrazr = random.randint(177, 187)
        secondrazr = random.randint(188, 201)
        thirdrazr = random.randint(202, 217)


    elif Data_distance == '800m':
        firstrazr = random.randint(136, 145)
        secondrazr = random.randint(146, 156)
        thirdrazr = random.randint(157, 168)


    elif Data_distance == '600m':
        firstrazr = random.randint(97, 103)
        secondrazr = random.randint(104, 110)
        thirdrazr = random.randint(111, 119)


    else:  # Data_size_class == '400m'
        firstrazr = random.randint(58, 61)
        secondrazr = random.randint(62, 66)
        thirdrazr = random.randint(67, 71)


    firstrazr = on_anomalies_noise(firstrazr)
    secondrazr = on_anomalies_noise(secondrazr)
    thirdrazr = on_anomalies_noise(thirdrazr)

    return Data_size(firstrazr, secondrazr, thirdrazr,  Data_distance)


def create_Data_distances(number_of_Data_distances):
    Data_distances = []
    for _ in range(number_of_Data_distances):
        Data_distances.append(create_random_options())
    return Data_distances


if __name__ == '__main__':
    Data_distances = create_Data_distances(100)
    random.shuffle(Data_distances)

    split_ratio = 0.8  # 80% для тренировочных данных
    split_index = int(len(Data_distances) * split_ratio)
    train_data = Data_distances[:split_index]
    test_data = Data_distances[split_index:]


    if not os.path.exists('train'):
        os.makedirs('train')
    if not os.path.exists('test'):
        os.makedirs('test')

    train_file = os.path.join('train', 'train_Data_distances.csv')
    test_file = os.path.join('test', 'test_Data_distances.csv')

    with open(train_file, mode='w', newline='') as train_file:
        writer = csv.writer(train_file)
        writer.writerow(['Class', 'firstrazr', 'secondrazr', 'thirdrazr'])

        for Data_distances1 in train_data:
            writer.writerow([Data_distances1.Data_distance, Data_distances1.firstrazr, Data_distances1.secondrazr,
                             Data_distances1.thirdrazr])

    with open(test_file, mode='w', newline='') as test_file:
        writer = csv.writer(test_file)
        writer.writerow(['Class', 'firstrazr', 'secondrazr', 'thirdrazr'])

        for Data_size in test_data:
            writer.writerow([Data_distances1.Data_distance, Data_distances1.firstrazr, Data_distances1.secondrazr,
                             Data_distances1.thirdrazr])

    print('Создание и сохранение данных прошло успешно')